
@page "/publication/editar/{CreateDate}"

@using FrontendPaulo.Data
@using System.Net.Http
@using System.Net.Http.Json

@inject HttpClient Http
@inject NavigationManager NavigationManager

<EditForm Model="oPublication">

    <div class="container-fluid">

        <div class="form-group row mb-1">

            <div class="col-sm-6">

                <div class="form-group row mb-1">

                    <div class="col-sm-6">
                        <h3>EDIT</h3>
                    </div>

                </div>

                <br />

                <div class="form-group row mb-1">
                    <InputDate class="form-control" @bind-Value="@oPublication.AuxDate" min="2012-01-01" max="2021-12-31"></InputDate>
                </div>

                <br />

                <div class="form-group row mb-1">
                    <InputTextArea class="form-control" @bind-Value="@oPublication.Title" placeholder="Enter Title"></InputTextArea>
                </div>

                <br />

                <div class="form-group row mb-1">
                    <InputTextArea class="form-control" @bind-Value="@oPublication.Link" placeholder="Enter Link"></InputTextArea>
                </div>

                <br />

                @if (oAlert.Visible)
                {
                    <div class="form-group row mb-1">
                        <div class="alert alert-@oAlert.Color" role="alert">
                            @oAlert.Message
                        </div>
                    </div>
                }

                <div class="form-group row mb-1">
                    <button type="submit" class="btn btn-success btn-lg btn-block" @onclick="Save"> Save </button>
                </div>

            </div>

            <div class="col-sm-6">
                <img src="/Images/Publications/main.jpg" class="img-fluid" alt="Responsive image">
            </div>

        </div>

    </div>
</EditForm>

@code {

    [Parameter]
    public string CreateDate { get; set; }

    Publication oPublication = new Publication();

    Response<Publication> oResponse = new Response<Publication>();

    String Url = "/api/Publication";

    Alert oAlert = new Alert();

    String[] actualDate;

    protected override async Task OnInitializedAsync()
    {
        oResponse = await Http.GetFromJsonAsync<Response<Publication>>(Url + "/" + CreateDate);
        oPublication = oResponse.Data;
        oPublication.AuxDate = Convert.ToDateTime(oPublication.PublicationDate); //REVISAR
    }

    private async Task Save()
    {
        if (validateMaxDate())
        {
            var response = await Http.PutAsJsonAsync<Publication>(Url, oPublication);

            oResponse = response.Content.ReadFromJsonAsync<Response<Publication>>().Result;

            if (oResponse.Success == 0) oAlert.isBad(oResponse.Message);

            else NavigationManager.NavigateTo("/publication/listar");

        }
    }

    private Boolean validateMaxDate()
    {
        actualDate = DateTime.Now.ToString().Split("/");

        String actualDay = actualDate[0];

        String actualMonth = actualDate[1];

        String actualYear = actualDate[2].Substring(0, 4);

        if (actualYear.Equals(oPublication.AuxDate.Year.ToString()))
        {
            if (actualMonth.Equals(oPublication.AuxDate.Month.ToString()))
            {
                if (Convert.ToInt32((oPublication.AuxDate.Day)) > Convert.ToInt32(actualDay))
                    return oAlert.isBad("Publication Date is greater than the current date");
            }
        }

        oPublication.PublicationDate = DateTime.Now.ToString().Split(" ")[0];

        return validateTitle();
    }

    private Boolean validateTitle()
    {
        if (oPublication.Title.Equals("")) return oAlert.isBad("Field Title is required");

        oPublication.Title = oPublication.Title.Trim();

        return validateLink();
    }

    private Boolean validateLink()
    {
        if (oPublication.Link.Equals("")) return oAlert.isBad("Field Link is required");

        oPublication.Link = oPublication.Link.Trim();

        return true;
    }
}